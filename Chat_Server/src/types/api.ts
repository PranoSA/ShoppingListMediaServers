/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/messages/{groupid}": {
    /** Gets Last Messages Sent In a Chat */
    get: {
      parameters: {
        query?: {
          /** @description "Max Amount of Messages to Query " */
          limit?: number;
          /** @description Optionally Add Search Terms To Query */
          terms?: string[];
          /** @description Search Above Or Below,  Reccomended for loading chat to query last 25 messages (before) now, and to make API calls with and without below set for cursoring around a message */
          below?: boolean;
          /** @description By Default, Term Search Or Joined on an AND query Set To False, To Search on an OR query */
          and?: boolean;
          /** @description UNIX 64 TIMESTAMP for the cursor search base, this application Does Not Support Wide Range Pagination \n To Get This Value from a message you want to inspect */
          start?: number;
          /** @description Return "Best" Results By Default, Search Results Will Be Ordered By Date, Rather Than Score  However, if you wish to Use Time Priority Date (Search Closest To In Time) The Cursor will be used as the weighing factor for results  This is not good for scanning a wide range of messages */
          ordered?: boolean;
          /** @description Default 1 Year, Enter Number of Seconds To Divide by e, if 0,  will be ignored */
          annum?: number;
        };
        path: {
          /** @description Group ID / Chat ID The Message Belongs To,  All Searches Must Be Inside of a Group You Are Authorized To Access Test: ab26b3d0-f1f8-49ca-85ea-46180f8679da */
          groupid: string;
        };
      };
      responses: {
        /** @description Fetching List Of Messages */
        200: {
          content: {
            "application/json": components["schemas"]["Message"][];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          groupid: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["MessageRequest"];
        };
      };
      responses: {
        /** @description Fetching Sequential Messages In Group Chat */
        200: {
          content: {
            "application/json": components["schemas"]["Message"];
          };
        };
      };
    };
  };
  "/searched/messages/{groupid}": {
    get: {
      parameters: {
        query?: {
          search?: string[];
        };
      };
      responses: {
        /** @description Searching Messages In Group Chat */
        200: {
          content: {
            "application/json": components["schemas"]["Message"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Message: {
      messageid?: number;
      groupid: string;
      author: string;
      content: string;
      sent_at: string;
      score?: number;
    };
    MessageRequest: {
      content: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
